{"version":3,"file":"static/js/89.5ea9e069.chunk.js","mappings":"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","sources":["components/SearchBar/SearchBar.js","Pages/Home/Home.js","components/Navbar/Navbar.js","components/Pagenation/Pagenation.js"],"sourcesContent":["\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom'; \r\nimport './searchBar.css';\r\nconst SearchBar = ({ searchQuery, onSearchChange, onSearch }) => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleSearch = () => {\r\n    if (searchQuery.trim()) {\r\n    \r\n      navigate(`/searchPage?query=${encodeURIComponent(searchQuery.trim())}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-bar-container  \">\r\n    <div className='content'>\r\n    <h2>Welcome to our movie app </h2>\r\n    <p>Millions of movie, TV shows and people to discover, Explore now</p>\r\n      <input \r\n        type=\"text\" \r\n        value={searchQuery} \r\n        onChange={(e) => onSearchChange(e.target.value)} \r\n        placeholder=\"Search movies...\" \r\n        className=\"search-bar\"\r\n      />\r\n      <button onClick={handleSearch} className=\"search-button\">Search</button>\r\n    </div>\r\n    </div>\r\n  \r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; \r\nimport axios from 'axios';\r\nimport { FaHeart, FaRegHeart } from 'react-icons/fa';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addToWatchlist, removeFromWatchlist } from '../../redux/slices/watchListSlice';\r\nimport NavBar from '../../components/Navbar/Navbar';\r\nimport SearchBar from '../../components/SearchBar/SearchBar'; \r\nimport PaginationControls from '../../components/Pagenation/Pagenation'; \r\nimport CircularProgressBar from '../../components/circularProgressBar/circularProgressBar'; \r\nimport './home.css';\r\nimport formatDate from '../../components/formatDate/formatDate';\r\n\r\n<formatDate/>\r\n\r\nconst Home = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const watchlist = useSelector((state) => state.watchlist);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchMovies = async () => {\r\n      try {\r\n        const response = await axios.get('https://api.themoviedb.org/3/discover/movie', {\r\n          params: {\r\n            api_key: 'f43ec82a5f24fe6190891894b7436c7a',\r\n            page: currentPage\r\n          }\r\n        });\r\n        setMovies(response.data.results);\r\n        setTotalPages(response.data.total_pages);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMovies();\r\n  }, [currentPage]);\r\n\r\n  const handleSearchChange = (query) => {\r\n    setSearchQuery(query);\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    if (searchQuery.trim()) {\r\n      navigate(`/searchPage?query=${encodeURIComponent(searchQuery.trim())}`);\r\n    }\r\n  };\r\n\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  const toggleWatchlist = (movie) => {\r\n    if (watchlist.some(watchlistedMovie => watchlistedMovie.id === movie.id)) {\r\n      dispatch(removeFromWatchlist(movie));\r\n    } else {\r\n      dispatch(addToWatchlist(movie));\r\n    }\r\n  };\r\n\r\n  const isMovieInWatchlist = (movie) => {\r\n    return watchlist.some(watchlistedMovie => watchlistedMovie.id === movie.id);\r\n  };\r\n\r\n  const handleMovieClick = (movieId) => {\r\n    navigate(`/movie/${movieId}`);\r\n  };\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <SearchBar \r\n        searchQuery={searchQuery} \r\n        onSearchChange={handleSearchChange} \r\n        onSearch={handleSearch} \r\n      />\r\n\r\n      <div className=\"movie-list\">\r\n        {movies.length > 0 ? (\r\n          movies.map(movie => (\r\n            <div \r\n              key={movie.id} \r\n              className=\"movie-card\" \r\n              onClick={() => handleMovieClick(movie.id)}\r\n            >\r\n              <div className=\"movie-poster-container\">\r\n                <img \r\n                  src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} \r\n                  alt={movie.title} \r\n                  className=\"movie-poster\"\r\n                />\r\n                <div className=\"movie_rating\">\r\n                  <CircularProgressBar percentage={Math.round(movie.vote_average * 10)} />\r\n                </div>\r\n              </div>\r\n              <h2>{movie.title}</h2>\r\n              <p>{formatDate(movie.release_date)}</p>\r\n              <div \r\n                className=\"movie-heart\" \r\n                onClick={(e) => { \r\n                  e.stopPropagation(); \r\n                  toggleWatchlist(movie); \r\n                }}\r\n              >\r\n                {isMovieInWatchlist(movie) ? (\r\n                  <FaHeart color=\"red\" />\r\n                ) : (\r\n                  <FaRegHeart color=\"gray\" />\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div>No movies found</div>\r\n        )}\r\n      </div>\r\n\r\n      <PaginationControls\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        onPageChange={handlePageChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { Link } from 'react-router-dom';\r\nimport { FaRegHeart, FaHeart } from 'react-icons/fa';\r\nimport { useSelector } from 'react-redux';\r\nimport './Navbar.css';\r\nimport LanguageContext from \"../../context/LanguageContext\";\r\n\r\nimport { useContext } from \"react\";\r\n\r\n\r\nconst NavBar = () => {\r\n  const watchlist = useSelector((state) => state.watchlist);\r\n  \r\n  const {language, setLanguage} = useContext(LanguageContext)\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg\" >\r\n      <Link className=\"navbar-brand\" to=\"/\">Movie App</Link>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarNav\"\r\n        aria-controls=\"navbarNav\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n        <ul className=\"navbar-nav\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/watchlist\">\r\n              <FaHeart color={watchlist.length > 0 ? 'red' : 'gray'} /> Watchlist\r\n            </Link>\r\n          </li>\r\n        \r\n       \r\n        </ul>\r\n        <span style={{cursor: \"pointer\"}} className=\"p-2 mx-3\" onClick={()=>setLanguage(language === \"en\" ? \"ar\" : \"en\")}>{language}</span>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","\r\nimport React from 'react';\r\nimport { Pagination } from 'react-bootstrap';\r\n\r\nconst PaginationControls = ({ currentPage, totalPages, onPageChange }) => {\r\n  const maxVisiblePages = 5; \r\n\r\n  const handlePageChange = (page) => {\r\n    if (page > 0 && page <= totalPages) {\r\n      onPageChange(page);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"pagination-container  container\">\r\n      <Pagination>\r\n        <Pagination.Prev\r\n          onClick={() => handlePageChange(currentPage - 1)}\r\n          disabled={currentPage === 1}\r\n        />\r\n        {[...Array(maxVisiblePages).keys()].map((_, index) => {\r\n          const pageNumber = index + 1;\r\n          return (\r\n            pageNumber <= totalPages && (\r\n              <Pagination.Item\r\n                key={pageNumber}\r\n                active={pageNumber === currentPage}\r\n                onClick={() => handlePageChange(pageNumber)}\r\n              >\r\n                {pageNumber}\r\n              </Pagination.Item>\r\n            )\r\n          );\r\n        })}\r\n        {totalPages > maxVisiblePages && (\r\n          <>\r\n            <Pagination.Ellipsis />\r\n            <Pagination.Item\r\n              onClick={() => handlePageChange(totalPages)}\r\n            >\r\n              {totalPages}\r\n            </Pagination.Item>\r\n          </>\r\n        )}\r\n        <Pagination.Next\r\n          onClick={() => handlePageChange(currentPage + 1)}\r\n          disabled={currentPage === totalPages}\r\n        />\r\n      </Pagination>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationControls;\r\n"],"names":["_ref","searchQuery","onSearchChange","onSearch","navigate","useNavigate","_jsx","className","children","_jsxs","type","value","onChange","e","target","placeholder","onClick","handleSearch","trim","encodeURIComponent","Home","movies","setMovies","useState","setSearchQuery","loading","setLoading","error","setError","currentPage","setCurrentPage","totalPages","setTotalPages","watchlist","useSelector","state","dispatch","useDispatch","useEffect","async","response","axios","get","params","api_key","page","data","results","total_pages","message","fetchMovies","isMovieInWatchlist","movie","some","watchlistedMovie","id","NavBar","SearchBar","query","length","map","handleMovieClick","movieId","src","poster_path","alt","title","CircularProgressBar","percentage","Math","round","vote_average","formatDate","release_date","stopPropagation","removeFromWatchlist","addToWatchlist","toggleWatchlist","FaHeart","color","FaRegHeart","PaginationControls","onPageChange","language","setLanguage","useContext","LanguageContext","Link","to","style","cursor","handlePageChange","Pagination","Prev","disabled","Array","keys","_","index","pageNumber","Item","active","_Fragment","Ellipsis","Next"],"sourceRoot":""}